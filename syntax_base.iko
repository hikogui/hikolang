
module lang : syntax;

/** The type of the syntax statement.
 *
 * - "alias": A name for the syntax expression.
 * - "node": A new node is created which contains the syntax expression.
 * - "list": The syntax expression forms a list, it does not introduce a new node,
 *           If multiple lists are expanded into a node they will be appended.
 * - "or": `or` expressions to an existing syntax.
 */
syntax alias syntax_type ( "alias" | "node" | "list" | "or" );

/** Match with a token.
 *
 * - ( expression ): A nested list of tokens.
 * - __string_literal__: Match with the text representation of a token.
 * - __identifier__: Match using the name of another syntax element, this
 *                   includes names of building token types.
 */
syntax alias syntax_expression ( "(" syntax_list ")" | __string_literal__ | __identifier__ );

/** A fully qualified token expression.
 *
 * - You may specify a name that can be used in `rewrite` statement.
 *   If not specified the the default name will be the identifier if the systax_expression
 *   is an identifier. Otherwise it becomes anonymous and can not be used in a `rewrite` statement.
 */
syntax node syntax_node (
      
      
       ( __identifier__ ":" )? syntax_expression ( "*" | "+" | "?" )? );

syntax list syntax_seq_list ( syntax_node+ )

syntax node syntax_or_list ( syntax_seq_list ( "|" syntax_seq_list )* );

/** Add syntax to the current compiler.
 *
 * When the syntax is complete the syntax is added to the current compiler immediatly.
 * The syntax is incomplate if one of the syntax expressions uses a name that is not
 * available yet.
 *
 * Note: It is a reportable error if there is a incomplete syntax at the end of a module.
 */
syntax node syntax ( "syntax" syntax_type __identifier__ "(" syntax_list ")" ";" );

/** An identifier following Unicode UAX#31.
 */
syntax alias id ( __identifier__ );

/** A sequence of characters following Unicode UAX#31 Pattern_syntax.
 *
 * Depending on the specific characters sometimes either the longest
 * or shortest sequence will be use.
 *
 * The following sequences will be break before and after the sequence:
 *  + Brackets: "[" "]" "(" ")" "{" "}"
 */
syntax alias op ( __operator__ );

/** A integer literal.
 *
 *  + Simple Decimal: [+-]?[0-9_']+
 *  + Binary: [+-]?0[bB][01_']+
 *  + Octal: [+-]?0[oO][0-7_']+
 *  + Decimal: [+-]?0[dD][0-9_']+
 *  + Hexadecimal: [+-]?0[xX][0-9a-fA-F_']+
 */
syntax alias int ( __integer_literal__ );

/** A floating point literal 
 *
 *  + [+-]?[0-9]*.[0-9]+([eE][+-]?[0-9]+)?
 *  + [+-]?[0-9]+.([eE][+-]?[0-9]+)?
 */
syntax alias float ( __floating_point_literal__ );
syntax alias char ( __char_literal__ );
syntax alias string ( __string_literal__ );
syntax alias bool ( "true" | "false" );
syntax alias void ( "void" );
syntax alias null ( "null" );

syntax literal_suffix ( id ( "@" id )? );

syntax literal (
      null
    | bool
    | int literal_suffix?
    | float literal_suffix?
    | char
    | string literal_suffix?
);

syntax alias variable_access ( "var" | "let" | "ref" | "shared" | "thread" );

syntax alias assign_and_convert_type ( ":" );
syntax alias assign_exact_type ( ":=" );
syntax alias assign_base_type ( ":<" );
syntax alias type_assignment_operator ( assign_and_convert_type | assign_exact_type | assign_base_type );
syntax alias type_assignment ( type_assignment_operator expression );

syntax node init_expression ( variable_access id type_assignment? ( "=" expression )? );

syntax list arguments ( expression ( "," expression )* ","? );
syntax list argument_declarations ( init_expression ( "," init_expression )* ","? );

syntax list list_arguments ( expression ( "," expression )* ","? );
syntax node list_literal ( "[" list_arguments "]" )

syntax list dictionary_arguments ( expression ":" expression ( "," expression ":" expression )* ","? );
syntax node dictionary_literal ( "[" dictionary_arguments "]" )

syntax alias list_comprehension ( expression "for" "(" init_expression "in" expression ")" ( "if" "(" expression ")" )? );
syntax node list_comprehension_literal ( "[" list_comprehension "]" )
syntax alias dictionary_comprehension ( expression ":" expression "for" "(" init_expression "in" expression ")" ( "if" "( expression ")" )? );
syntax node dictionary_comprehension_literal ( "[" dictionary_comprehension "]" )

syntax node lambda_expression (
      "{" ( arguments "in" )? statements "}"
);

syntax index_expression ( expression "[" arguments "]" );
syntax call_expression ( expression "(" arguments ")" );

syntax member_access_expression ( expression "." id );

syntax expression (
      "(" expression ")"
    | void
    | literal
    | id
    | "$" int
    | "$" id
    | "$"
    | init_expression
    | member_access_expression
    | expression op
    | expression op expression
    | op expression
    | index_expression
    | call_expression
    | expression "?" expression ":" expression
    | lambda_expression
    | "[" list_arguments "]"
    | "[" dictionary_arguments "]"
    | "[" list_comprehension "]"
    | "[" dictionary_comprehension "]"
);





syntax operator_statement ( "operator" op_type:id op "precedence" order:int ass:id "function" function:id );
syntax statement or ( operator_statement );


