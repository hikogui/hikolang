
module lang.syntax.base : lang;
import lang.syntax.syntax_statement : lang;

/** A module name.
 *
 * A module name is a dot `.` separated hierarchy of UAX#31 identifiers.
 * The left most identifier is more global, and the right most is more specific.
 * It will often match the same hierarchy of the file system; very similar to
 * Java.
 *
 * A prefix dot `.` references the root module.
 */
syntax list_node module_name ( "."? __identifier__ ( "." __identifier__ )*);

/** Declare a module.
 *
 * If a file has a `module` statement as the first statement.
 *
 * The first name is the module-name, the second name after the colon `:` is
 * the public-module-name. If the name is a string-literal then instead
 * of a module an executable is created instead, the string-literal forms
 * the filename of the executable, excluding the executable-extension of
 * the operating system.
 *
 * Identifiers declared in a module are added to the module-name namespace.
 * Public identifiers declared in a module are also added to the
 * public-module-name namespace.
 *
 * A search for identifiers starts in the module-name namespace, followed by
 * a search in the public-module-name namespace.
 */
syntax node module_statement ( "module" ( name:module_name ( ":" public:module_name )? | executable:__string_literal ) ";" );

/** Import modules.
 *
 * Import a module into the current module. `import` statements must appear
 * directly after a `module` statement.
 *
 * The first name is the module to be imported, the second name
 * after the colon `:` is the module-alias.
 *
 * A identifier must be prefixed with either the actual module-name or the
 * module-alias. If the imported module declares to be part of a
 * public-module-name that is equal to the current public-module-name, then
 * unprefixed identifiers can be found in the public-module-name namespace.
 */
syntax node import_statement ( "import" name:module_name ( ":" alias:module_name )? ";" );

syntax list_node import_statements ( import_statment* );

syntax alias file_statement (
      ';'
    | syntax_statement
    | operator_statement
    | rewrite_statement
);

syntax list_node file_statement ( file_statement* );

syntax alias file (
    module:module_statement
    imports:import_statements
    statements:file_statements
);


syntax alias variable_access ( "var" | "let" | "ref" | "shared" | "thread" );

syntax alias assign_and_convert_type ( ":" );
syntax alias assign_exact_type ( ":=" );
syntax alias assign_base_type ( ":<" );
syntax alias type_assignment_operator ( assign_and_convert_type | assign_exact_type | assign_base_type );
syntax alias type_assignment ( type_assignment_operator expression );

syntax node init_expression ( variable_access id type_assignment? ( "=" expression )? );

syntax list arguments ( expression ( "," expression )* ","? );
syntax list argument_declarations ( init_expression ( "," init_expression )* ","? );

syntax list list_arguments ( expression ( "," expression )* ","? );
syntax node list_literal ( "[" list_arguments "]" )

syntax list dictionary_arguments ( expression ":" expression ( "," expression ":" expression )* ","? );
syntax node dictionary_literal ( "[" dictionary_arguments "]" )

syntax alias list_comprehension ( expression "for" "(" init_expression "in" expression ")" ( "if" "(" expression ")" )? );
syntax node list_comprehension_literal ( "[" list_comprehension "]" )
syntax alias dictionary_comprehension ( expression ":" expression "for" "(" init_expression "in" expression ")" ( "if" "( expression ")" )? );
syntax node dictionary_comprehension_literal ( "[" dictionary_comprehension "]" )

syntax node lambda_expression (
      "{" ( arguments "in" )? statements "}"
);

syntax index_expression ( expression "[" arguments "]" );
syntax call_expression ( expression "(" arguments ")" );

syntax member_access_expression ( expression "." id );

syntax block_expression ( "(" any_expression ")" );

syntax expression ( assignment_expression | non_assignment_expression );

syntax assignment_expression ( expression __assignment_operator__ expression );

syntax non_assignment_expression (
      block_expression
    | init_expression
    | lambda_expression
    | value:literal
    | name:__identifier__
    | op:"$" rhs:__integer_literal__
    | op:"$" rhs:__identifier__
    | op:"$"
    | lhs:expression op:"." rhs:__identifier
    | lhs:expression op:__suffix_operator__
    | lhs:expression op:__binary_operator__ rhs:expression
    | op:__prefix_operator__ rhs:expression
    | lhs:expression op:"[" args:arguments "]"
    | lhs:expression op:"(" args:arguments ")"
    | lhs:expression op:"?" rhs_true:expression ":" rhs_false:expression
    | "[" list_arguments "]"
    | "[" dictionary_arguments "]"
    | "[" list_comprehension "]"
    | "[" dictionary_comprehension "]"
);



syntax operator_statement ( "operator" op_type:id op "precedence" order:int ass:id "function" function:id );
syntax statement or ( operator_statement );
