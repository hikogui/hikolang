
syntax literal_suffix ( id ( "@" id )? );

/** A integer literal.
 *
 * There are two parts of a integer literal: The 'value' and the 'unit'.
 *
 * The 'value' part is the token that follows one of the following regular
 * expressions:
 *
 *  + Simple Decimal: [+-]?[0-9_']+
 *  + Binary: [+-]?0[bB][01_']+
 *  + Octal: [+-]?0[oO][0-7_']+
 *  + Decimal: [+-]?0[dD][0-9_']+
 *  + Hexadecimal: [+-]?0[xX][0-9a-fA-F_']+
 *
 * The 'unit' is used to create a more specific type for the integer, for
 * example the unit `mm` is for creating an integer representing a millimeter.
 *
 * A more complicated system of units also includes a dimension.
 * For example `mm width` would be a width in millimeters, to separate it from
 * the height in millimeters. A scaler derived from dividing `mm width` by
 * `mm width` would still include the dimension `width`.
 *
 * There for these literals may have multiple suffixes.
 */
syntax declaration __integer_literal__;

syntax alias value_literal (
      __integer_literal__
    | __floating_point_literal__
    | __char_literal__
    | __string_literal__
)

syntax alias quantity_tag (
   "#" __identifier__
);

/**
 */
syntax node dimensional_literal (
    value:value_literal __identifier__? dimension_tag*
);

syntax literal (
      "void"
    | "null"
    | "true"
    | "false"
    | dimensional_literal
);



dimension P ( L );
unit P px ( L1 );
quantity P width ( L1 );
quantity P height ( L1 ); 

dimension Q ( T, L, M, I, O, N, J );
unit Q m ( L1 );
unit Q mm = m / 1000;
quantity Q width ( L1 );
quantity Q height ( L1 );
quantity Q area ( L2 );
quantity Q area = width * height;
quantity Q force = mass * accelleration;

func __literal_long__(x: string)
{

}

func __literal_mm__(x: string)
{
    return __parse_literal__(x) #mm;
}

var foo = 912837438922398798327492387492374982374932874923734 long;
var bar = 12.4 mm;

let int = interface() {
  pub let lo;
  pub let hi;
  var v;

  pub let __init__();
  pub let __init__(: int);
  pub let __init__(: __s64__);
  pub var __add__(lhs: int, rhs: int)
  let unchecked_init(: __s64__);
};

func __index__(self := int, _lo: int : __s64__, _hi: int : __s64__)
  pre(lo <= hi)
  pure,
  memoize
{
    var _value_type : type;
    if (_lo >= -128 and _hi <= 127) {
      _value_type = __s8__;
    } else {
      _value_type = __s64__;
    }

    return struct(int) {
      let value_type = _value_type;
      let lo = _lo;
      let hi = _hi;
      var v : value_type;

      func __init__()
      {
        v = lo;
      }

      func __init__(other: int)
        pre((lo <= other.lo and hi >= other.hi) or (other.v >= lo and other.v <= hi)) 
      {
        v = other.v;
      }

      func __init__(x: __s64__)
        pre(other >= lo and other <= hi)
      {
        v = x;
      }

      func unchecked_init(x: __s64__)
      {
        auto r = self();
        r.v = x;
        return r;
      }

    };
}

func __add__(lhs: int, rhs: int)
{
  return int[lhs.lo + rhs.lo, lhs.hi + rhs.hi].unchecked_init(__unchecked_add__(lhs.v, rhs.v));
}

let my_struct = struct {
  var x : int[0,255];
  var y : int[0,255];
};

let my_index_type = int[-1,5] #my_array_type_index;
let my_array_type = array[my_index_type] : int[0,255] #mm#width;

var table : my_array_type;

func foo(index : my_index_type)
{
  return table[index];
}

foo(4 #my_array_type_index);
